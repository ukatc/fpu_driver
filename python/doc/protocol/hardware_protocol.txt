Updates to the hardware protocol

Command identifiers are written in mixedCase,
state identifiers in ALLCAPS.

Clarifications and details to Version 1
---------------------------------------

Direction values:

bit0 indicates the direction:
1 - clockweise
0 - counter-clockwise


# CONFIG_MOTION:

## rx0

rx0 (rx byte 0) carries the first / last boolean flags:
bit 0 - first flag
bit 1 - last flag

## rx6 -- rx7
rx6 and rx7 are obsolete (value is computed in firmware)

# Set_Ustep / setUStep

Sets microstepping in controller

rx1 is the microstep level, allowed values 1,2,4,8

# Free_Collide / freeCollide

Move beta arm slowly after collision was detected.
Parameter in rx1 is direction.

rx1 contains direction in bit 0

The step size could be added, but is currently fixed
in order to protect the hardware.

# Read_Reg / readRegister

reads one byte from the controller memory,
rx1 contains the bank and rx2 the 8 - bit address





# message priorities:

- apart from the broadcast messages, FPU responses have higher
  priorities than commands

0000 - FPU warnings
0001 - FPU responses
0010 - high-priority driver commands
0011 - low-priority driver commands



Changes for Version 2
---------------------

# obsolete commands and messages

WARNSTALLX and WARNSTALLY are dropped

# changes / combined commands

Get_ErrX and Get_ErrY are combined to getError

Get_StepsX and Get_StepsY are combined to getPosition

The response to configMotion, repeatMotion, and
reverseMotion commands report the
number of waveform entries in parameter tx4.

# additional commands

## setTimestep - sets time division in 100 nanosecond units

## setMinFrequency - sets minimum frequency at the end of waveforms

## getStatus - gets the status information

## getFirmwareVersion - gets Firmware version and creation date
Byte tx2 - tx4 : major version / minor version / patchlevel
Byte tx5 - tx7 : year / month / day

## checkIntegrity - gets CRC checksum of firmware (if possible to implement)

# renamed commands and states

## INITIALISED - renamed to AT_DATUM

## Enable_Collide - renamed to enableBetaCollisionProtection

## Free_Collide - renamed to freeBetaCollision

## state COLLISION_DETECTED - renamed to BETA_COLLISION_DETECTED

## state COLLISION_RECOVERY - renamed to BETA_COLLISION_RECOVERY

## state LIMIT_STOP - renamed to ALPHA_LIMIT_STOP

# Additional commands and states

## freeAlphaLimitBreach - moves alpha arm in small steps
Parameter in rx1 is direction. The correct direction
to move should, under any normal circumstance, be
reflected in the direction bit for the alpha arm,
and the alpha step counter.

## enableAlphaLimitProtection - re-activates
protection logic for alpha arm.

## lockFPU / unlockFPU

The lockFPU command puts the FPU into locked state,
and it will only respond to resetFPU and unlockFPU.

The unlockFPU command will clear the locked state,
and if the "INITIALIZED" status bit is set, will
put it into "FINISHED" state; otherwise, into
UNINITIALIZED state.


## abortMotion

The abortMotion command will as quickly as possible stop each FPU, and
switch the state to ABORTED.  The FPU will ignore any movement
commands until it receives an enableMove message. Stopping should be
done so that no accuracy is lost int he step counter.

## enableMove

Switches FPUs from the ABORTED state to the FINISHED state,
which enables them to receive further movement commands.

## findDatum

The findDatum command works always the same
for the alpha arm. For the beta arm, there are
three alternatives to determine the movement direction:

rx1 - bit 0 : AUTO : search datum according to internal step counter,
and ignore bit 1.

rx1 - bit 1 : UP_FIRST : assume true position is negative, so move
first in positive direction until datum switch is hit and left
again. If both bit 0 and bit 1 are not set, move into negative
direction until datum switch is hit.

The finishedDatum reponse to this command does *NOT* contain the step
counters, but the value of the step counters when the datum switch was
hit and before they were resetted.

## getError

Retrieves offset of step counter at last datum operation.

## enableBetaCollisionProtection

re-activates the collision detection circuit
and clears the collision status bit.

# Replies

- all responses and warnings have the same structure and contain
position, FPU status code, FPU status flags, and error code.
(The only exception is the finishedDatum response which contains
not the position, but the devidation of the step counter from
the value of zero when hitting the datum switch.)

tx0 - FPU id (this is redundant but might be useful for checking
and is probably easier in the firmware)

tx1 - echo of command code, or ID of warning message

tx2 - status flags (8 bit, as defined below)

tx3 - error code and state number:

bits 0 - 3 : state number
bit 4 - 7  : error code (for example invalid command, or too
             many entries in waveform) 

tx4 - tx5 : alpha steps (signed 16-bit number)
tx6 - tx7 : beta steps (signed 16-bit number)

## status flags

The bits of the status flags are defined as follows:

bit 0 - Alpha at datum
bit 1 - Beta at datum
bit 2 - collision was detected
bit 3 - alpha arm at limit
bit 4 - FPU is locked
bit 5 - last direction for alpha
bit 6 - last direction for beta
bit 7 - fpu was initialized at least once


## Message length

In protocol version 2, messages are sent with minimum length to save
some bandwidth.


# Changes to state diagram

## states for collision handling renamed

## handling of hitting the alpha limit switch made
separate from beta collision handling.

## state "COORDINATE_RECOVERY" deleted.
