
* DONE Design questions

** DONE subobjects for CAN gateways
** DONE command protocol

** DONE naming of classes
- class for CAN Bus level object GatewayDriver
- class for whole grid of FPUs GridDriver (to avoid clash with Python library)

* DONE code CAN driver

** DONE file preamble
** DONE write class skeleton
- [X] add members
  - [X] state array
  - [X] struct: ready, pending and error counters
  - [X] socket
  - [X] read and write buffers
  - [X] condition variable
  - [X] state mutex
  - [X] sending and receiving threads


- [X] initialisation / constructor / destructor code
  - [X] state array
  - [X] struct: ready, pending and error counters
  - [X] socket
  - [X] read and write buffers
  - [X] condition variable
  - [X] state mutex
  - [X] sending and receiving threads

- [X] state enumeration
** DONE handle byte stuffing better
** DONE socket handling using poll()

** DONE define E_GridState enumeration

** DONE define some Error codes for CAN driver
** DONE look up timing functions
** DONE split off code thread-safe FPUStates Array
*** DONE getGridState method
*** DONE waitForState method
*** DONE getNextTimeOut method
*** DONE CommandID submember
*** DONE state counters
*** DONE addTimeOut method
*** DONE clearTimeOut method
*** DONE Fix wait states and error fields
*** DONE bind result into receive loop
*** DONE write FPUArray::process_timeouts()
*** DONE fix time_spec functions and signatures
** DONE code thread-safe CommandQueue
*** DONE waitForCommand method
*** DONE getCommandMask
*** DONE pushCommand method
*** DONE popCommand method
** DONE define time quantization
** DONE Set grid state on disconnect, and signal to Wait()
** DONE Normalize timespecs (set_normalized_timespec, -> 
time_spec_add_safe), also  use TIME_T_MAX from time.h)
** DONE Base CommandQueue length on NUMFPUS * 256, 
  for the wavetable loading
** DONE Define two enums for the CAN driver:
 one for the driver state, and one for 
 the last error
** DONE command interface (draft)
** DONE command serialisation
- [ ] does that need a class and interface?
** DONE response handler interface
*** DONE read Pablo's sample for hints
*** DONE ask Pablo about sync0 and sync1
*** DONE read about priorities / canids
*** DONE Sample response handler and ping message
** DONE code thread-safe CommandPool (memory pool)
** DONE termination / synchronization
*** DONE mask SIGPIPE signal
*** DONE use counter of still running threads?
*** DONE use atomic usage count for socketfd for clean termination
*** DONE issue shutdown() before close()
** DONE Fix memory leak on exiting tx loop
** DONE add condition variable to pop cmdqueue
** DONE add comment to wait on pop
** DONE Error handling of syscalls
*** DONE check errno as soon as possible, anywhere
** DONE A few Top-level calls (just as example)
*** DONE Top-level calls
*** DONE check count of pending states
** DONE compile
*** DONE write makefile
*** DONE Add semicolons
** DONE Fix makefile to build static lib
** DONE build with -Wall -pendandic -Wextra
** DONE Move workstation
* TODO Improvements
** DONE API methods hould return state reference parameter
.. in output argument. This requires an additional lock
when the internal state struct is used.
** DONE fix name field in header
** DONE put commands in namespace
** DONE put can level stuff into namespace
** DONE split methods in initialize() / uninitialize():
  anywhere we allocate memory via the STL, to catch
  out-of-memory exceptions

  Also, thread tghrough the calls of these methods
  up to the top level.
** DONE compile -Wall
** DONE Fix CPU hogging
** DONE fix Python wrapper for grid_state
** DONE clean up debug messages 
** DONE Fix encoding of beta step count in both driver and mock_controller
** TODO fix changed CAN command names (setTicksPerSegment and setStepsPerFrame, also getCounterDeviation)
** TODO fix message lengths in all version 1 CAN commands, and re-test
** TODO fix decoding of all CAN commands in mock_controller.py to make it clearer
** TODO Fix encoding of mock responses (use TX[n] = ... )
** TODO fix const correctness
** DONE add PingFPU  command
** DONE add resetFPU command
** DONE Add eventfds for new commands and for driver shutdown
** DONE Add time-outs for commands
** TODO revise expects_response field
** DONE add response handlers for base commands
** TODO add mock gateway code for base commands (version 1)
** TODO add Python wrappers for base commands
** TODO Add tentative CAN responses
*** DONE config_motion
*** DONE ping
*** DONE print frequency of epoll / cond_wait calls
*** DONE solve argument passing of grid_state
*** DONE print invalid responses
** TODO add separate reporting/logging of results
** TODO make API const-correct
** TODO make signatures const-correct
** TODO Clean-up
*** DONE Split declarations and implementations into source files as usual
*** DONE consider: move locus of time-stamping sent command to after termination of sending
*** DONE collect time utility functions into own file
*** DONE replace hand-rolled time function with system standard funcs
*** TODO split SBuffer in independent read buffer and write buffer ?
** TODO revise initializations of socket and threads

